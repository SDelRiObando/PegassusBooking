1. Find out the number of records are in the collection pitching
db.pitching.count()
44139

2. Count the number of records that are in the year of 1872
db.pitching.count({"year" : 1872} )
23

3. Count the number of records that is between year of 1870 to 1880
db.pitching.aggregate(
	{$match: {year: {$gte: 1870}, year: {$lte: 1880}}},
	{$group: {_id: null, count: {$sum: 1}}}
)
//match stage filters for just the results within 1870-1880
//group stage gets the count for that subgroup

4. Find the average year in the whole pitching collection
db.pitching.aggregate(
	{ $group: { _id: null, average: { $avg: "$year" } } }
)

5. Group the players by year and return the average ipouts per year
db.pitching.aggregate(
	{ $group: { _id: "$year", average: { $avg: "$ipouts" } } }
)

6. Order the team_id by the number of players in the team and group by year and team_id
db.pitching.aggregate(
	{ $group: { _id: {"team_id": "$team_id", "year": "$year"}, "pitchers": { $sum: 1 } } },
	{ $sort: { pitchers: 1} }
)
// group stage gets the count (i.e. "pitchers") for each unique combination of team_id and year
// sort stage orders all the subgroups from the previous stage's output by its "pitchers" field

7. Which player_id has the highest ipouts?
db.pitching.aggregate(
	{ $group: { _id: "$player_id", TotalOuts: { $sum: "$ipouts" } }},
	{ $sort: {TotalOuts : -1}},
	{ $group: {_id: null, Player: {$first: "$_id"}, Outs_pitched: {$first: "$TotalOuts"}}}
)	// It's Cy Young
// first group stage gets the sum total ipouts for each player
// second group stage sorts the previous stage's totals by the number of total ipouts
// third stage takes gets the player_id and total ipouts from the first document in the sorted collection

